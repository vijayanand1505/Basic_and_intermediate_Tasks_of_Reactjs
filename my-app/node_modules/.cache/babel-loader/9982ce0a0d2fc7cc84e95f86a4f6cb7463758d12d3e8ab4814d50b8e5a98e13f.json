{"ast":null,"code":"var _jsxFileName = \"/Users/vijayanand/Desktop/New Task and CRUD/my-app/src/components/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n  const wordsArray = [\"Hello\", \"World\", \"React\", \"Typing\", \"Effect\"];\n  const [wordIndex, setWordIndex] = useState(0);\n  const [charIndex, setCharIndex] = useState(0);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const typingDelay = 100;\n  useEffect(() => {\n    const typingInterval = setInterval(() => {\n      if (charIndex < wordsArray[wordIndex].length) {\n        setCurrentWord(wordsArray[wordIndex].substring(0, charIndex + 1));\n        setCharIndex(charIndex + 1);\n      } else {\n        // Pause at the end of the word\n        clearInterval(typingInterval);\n        setTimeout(() => {\n          // Erase the word with a delay\n          const erasingInterval = setInterval(() => {\n            if (charIndex >= 0) {\n              setCurrentWord(wordsArray[wordIndex].substring(0, charIndex));\n              setCharIndex(charIndex - 1);\n            } else {\n              // Move to the next word\n              clearInterval(erasingInterval);\n              setWordIndex(prevIndex => (prevIndex + 1) % wordsArray.length);\n              setTimeout(() => {\n                // Start typing the next word\n                setCharIndex(0);\n                const typingInterval = setInterval(() => {\n                  if (charIndex < wordsArray[wordIndex].length) {\n                    setCurrentWord(wordsArray[wordIndex].substring(0, charIndex + 1));\n                    setCharIndex(charIndex + 1);\n                  } else {\n                    // Finished typing current word\n                    clearInterval(typingInterval);\n                  }\n                }, typingDelay);\n              }, 1000); // Delay before typing the next word\n            }\n          }, typingDelay);\n        }, 1000); // Delay after typing the word\n      }\n    }, typingDelay);\n    return () => clearInterval(typingInterval);\n  }, [charIndex, wordIndex, wordsArray]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Typing Effect:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"This is the typing effect\", currentWord]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"QTwQ7zqZn6QNvqgfGkkhHj5SHyI=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Home","_s","wordsArray","wordIndex","setWordIndex","charIndex","setCharIndex","currentWord","setCurrentWord","typingDelay","typingInterval","setInterval","length","substring","clearInterval","setTimeout","erasingInterval","prevIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vijayanand/Desktop/New Task and CRUD/my-app/src/components/Home.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nexport const Home = () => {\n  const wordsArray = [\"Hello\", \"World\", \"React\", \"Typing\", \"Effect\"];\n  const [wordIndex, setWordIndex] = useState(0);\n  const [charIndex, setCharIndex] = useState(0);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const typingDelay = 100;\n\n  useEffect(() => {\n    const typingInterval = setInterval(() => {\n      if (charIndex < wordsArray[wordIndex].length) {\n        setCurrentWord(wordsArray[wordIndex].substring(0, charIndex + 1));\n        setCharIndex(charIndex + 1);\n      } else {\n        // Pause at the end of the word\n        clearInterval(typingInterval);\n        setTimeout(() => {\n          // Erase the word with a delay\n          const erasingInterval = setInterval(() => {\n            if (charIndex >= 0) {\n              setCurrentWord(wordsArray[wordIndex].substring(0, charIndex));\n              setCharIndex(charIndex - 1);\n            } else {\n              // Move to the next word\n              clearInterval(erasingInterval);\n              setWordIndex((prevIndex) => (prevIndex + 1) % wordsArray.length);\n              setTimeout(() => {\n                // Start typing the next word\n                setCharIndex(0);\n                const typingInterval = setInterval(() => {\n                  if (charIndex < wordsArray[wordIndex].length) {\n                    setCurrentWord(\n                      wordsArray[wordIndex].substring(0, charIndex + 1)\n                    );\n                    setCharIndex(charIndex + 1);\n                  } else {\n                    // Finished typing current word\n                    clearInterval(typingInterval);\n                  }\n                }, typingDelay);\n              }, 1000); // Delay before typing the next word\n            }\n          }, typingDelay);\n        }, 1000); // Delay after typing the word\n      }\n    }, typingDelay);\n\n    return () => clearInterval(typingInterval);\n  }, [charIndex, wordIndex, wordsArray]);\n\n  return (\n    <div>\n      <h1>Typing Effect:</h1>\n      <p>This is the typing effect{currentWord}</p>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}