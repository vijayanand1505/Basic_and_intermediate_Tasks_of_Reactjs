{"ast":null,"code":"var _jsxFileName = \"/Users/vijayanand/Desktop/New Task and CRUD/my-app/src/components/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n  const wordsArray = [\"Hello\", \"World\", \"React\", \"Typing\", \"Effect\"];\n  const [wordIndex, setWordIndex] = useState(0);\n  const [charIndex, setCharIndex] = useState(0);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isWaiting, setIsWaiting] = useState(false);\n  const typingDelay = 300; // Delay between typing each character\n  const erasingDelay = 100; // Delay between erasing each character\n  const newTextDelay = 1000; // Delay before typing the next word\n  const waitingTime = 2000; // Waiting time after typing a word\n\n  useEffect(() => {\n    const type = () => {\n      if (charIndex < wordsArray[wordIndex].length) {\n        setCurrentWord(prev => prev + wordsArray[wordIndex][charIndex]);\n        setCharIndex(prev => prev + 1);\n      } else if (charIndex === wordsArray[wordIndex].length) {\n        setIsWaiting(true);\n        setTimeout(() => {\n          setIsWaiting(false);\n          setIsDeleting(true);\n        }, waitingTime);\n      }\n    };\n    const erase = () => {\n      if (charIndex > 0) {\n        setCurrentWord(prev => prev.slice(0, prev.length - 1));\n        setCharIndex(prev => prev - 1);\n      } else if (charIndex === 0) {\n        setIsDeleting(false);\n        setWordIndex(prev => (prev + 1) % wordsArray.length);\n      }\n    };\n    const typingInterval = setInterval(() => {\n      if (!isWaiting) {\n        if (isDeleting) {\n          erase();\n        } else {\n          type();\n        }\n      }\n    }, isDeleting ? erasingDelay : typingDelay);\n    return () => clearInterval(typingInterval);\n  }, [charIndex, wordIndex, isDeleting, isWaiting]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Typing Effect:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        color: \"blue\",\n        fontSize: \"24px\"\n      },\n      children: [\"This is the typing effect \", currentWord]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"fN5p2VZGyrVqBd96W6ojUIE/bNA=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Home","_s","wordsArray","wordIndex","setWordIndex","charIndex","setCharIndex","currentWord","setCurrentWord","isDeleting","setIsDeleting","isWaiting","setIsWaiting","typingDelay","erasingDelay","newTextDelay","waitingTime","type","length","prev","setTimeout","erase","slice","typingInterval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontSize","_c","$RefreshReg$"],"sources":["/Users/vijayanand/Desktop/New Task and CRUD/my-app/src/components/Home.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nexport const Home = () => {\n  const wordsArray = [\"Hello\", \"World\", \"React\", \"Typing\", \"Effect\"];\n  const [wordIndex, setWordIndex] = useState(0);\n  const [charIndex, setCharIndex] = useState(0);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isWaiting, setIsWaiting] = useState(false);\n  const typingDelay = 300; // Delay between typing each character\n  const erasingDelay = 100; // Delay between erasing each character\n  const newTextDelay = 1000; // Delay before typing the next word\n  const waitingTime = 2000; // Waiting time after typing a word\n\n  useEffect(() => {\n    const type = () => {\n      if (charIndex < wordsArray[wordIndex].length) {\n        setCurrentWord((prev) => prev + wordsArray[wordIndex][charIndex]);\n        setCharIndex((prev) => prev + 1);\n      } else if (charIndex === wordsArray[wordIndex].length) {\n        setIsWaiting(true);\n        setTimeout(() => {\n          setIsWaiting(false);\n          setIsDeleting(true);\n        }, waitingTime);\n      }\n    };\n\n    const erase = () => {\n      if (charIndex > 0) {\n        setCurrentWord((prev) => prev.slice(0, prev.length - 1));\n        setCharIndex((prev) => prev - 1);\n      } else if (charIndex === 0) {\n        setIsDeleting(false);\n        setWordIndex((prev) => (prev + 1) % wordsArray.length);\n      }\n    };\n\n    const typingInterval = setInterval(\n      () => {\n        if (!isWaiting) {\n          if (isDeleting) {\n            erase();\n          } else {\n            type();\n          }\n        }\n      },\n      isDeleting ? erasingDelay : typingDelay\n    );\n\n    return () => clearInterval(typingInterval);\n  }, [charIndex, wordIndex, isDeleting, isWaiting]);\n\n  return (\n    <div>\n      <br />\n      <h1>Typing Effect:</h1>\n      <h4 style={{ color: \"blue\", fontSize: \"24px\" }}>\n        This is the typing effect {currentWord}\n      </h4>{\" \"}\n      <br />\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}