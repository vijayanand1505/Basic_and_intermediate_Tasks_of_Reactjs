{"ast":null,"code":"var _jsxFileName = \"/Users/vijayanand/Desktop/New/my-app/src/components/Time.js\";\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Time = () => {\n  var _s = $RefreshSig$();\n  function LiveTime() {\n    _s();\n    const [time, setTime] = useState(new Date());\n    const [formattedTime, setFormattedTime] = useState('');\n    const [formattedDate, setFormattedDate] = useState('');\n    useEffect(() => {\n      const interval = setInterval(() => {\n        let date = new Date();\n        let hh = date.getHours();\n        let mm = date.getMinutes();\n        let ss = date.getSeconds();\n        let session = \"AM\";\n        if (hh === 0) {\n          hh = 12;\n        }\n        if (hh > 12) {\n          hh = hh - 12;\n          session = \"PM\";\n        }\n        hh = hh < 10 ? \"0\" + hh : hh;\n        mm = mm < 10 ? \"0\" + mm : mm;\n        ss = ss < 10 ? \"0\" + ss : ss;\n        let formattedTime = hh + \":\" + mm + \":\" + ss + \" \" + session;\n        setFormattedTime(formattedTime);\n        let formattedDate = date.getDate() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getFullYear();\n        setFormattedDate(formattedDate);\n        setTime(new Date());\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n      };\n    });\n  }\n  _s(LiveTime, \"AnoGH35rg0vtl7YniqgGlimr+qY=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"text-left\",\n      children: LiveTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_c = Time;\nvar _c;\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Time","_s","$RefreshSig$","LiveTime","time","setTime","Date","formattedTime","setFormattedTime","formattedDate","setFormattedDate","interval","setInterval","date","hh","getHours","mm","getMinutes","ss","getSeconds","session","getDate","getMonth","getFullYear","clearInterval","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vijayanand/Desktop/New/my-app/src/components/Time.js"],"sourcesContent":["import React, { useEffect } from 'react'\nimport { useState } from 'react'\n\nexport const Time = () => {\n\n    function LiveTime(){\n\n        const [time, setTime] = useState(new Date());\n        const [formattedTime, setFormattedTime] = useState('');\n        const [formattedDate , setFormattedDate] = useState('');\n\n        useEffect(() => {\n            const interval = setInterval(() => {\n                let date = new Date();\n                let hh = date.getHours();\n                let mm = date.getMinutes();\n                let ss = date.getSeconds();\n                let session = \"AM\";\n            \n                if(hh === 0){\n                    hh = 12;\n                }\n                if(hh > 12){\n                    hh = hh - 12;\n                    session = \"PM\";\n                }\n    \n                hh = (hh < 10) ? \"0\" + hh : hh;\n                mm = (mm < 10) ? \"0\" + mm : mm;\n                ss = (ss < 10) ? \"0\" + ss : ss;\n                    \n                let formattedTime = hh + \":\" + mm + \":\" + ss + \" \" + session;\n                setFormattedTime(formattedTime);\n    \n                let formattedDate = date.getDate()+\"-\"+(date.getMonth()+1)+\"-\"+ date.getFullYear();\n                setFormattedDate(formattedDate);\n    \n              setTime(new Date());\n            }, 1000);\n        \n            return () => {\n              clearInterval(interval);\n            };\n        \n\n        });\n\n\n    }\n\n\n  return (\n    <div>\n        <h5 className='text-left'>{LiveTime}</h5>\n    </div>\n  )\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAEtB,SAASC,QAAQA,CAAA,EAAE;IAAAF,EAAA;IAEf,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAIS,IAAI,CAAC,CAAC,CAAC;IAC5C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;IACtD,MAAM,CAACY,aAAa,EAAGC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;IAEvDD,SAAS,CAAC,MAAM;MACZ,MAAMe,QAAQ,GAAGC,WAAW,CAAC,MAAM;QAC/B,IAAIC,IAAI,GAAG,IAAIP,IAAI,CAAC,CAAC;QACrB,IAAIQ,EAAE,GAAGD,IAAI,CAACE,QAAQ,CAAC,CAAC;QACxB,IAAIC,EAAE,GAAGH,IAAI,CAACI,UAAU,CAAC,CAAC;QAC1B,IAAIC,EAAE,GAAGL,IAAI,CAACM,UAAU,CAAC,CAAC;QAC1B,IAAIC,OAAO,GAAG,IAAI;QAElB,IAAGN,EAAE,KAAK,CAAC,EAAC;UACRA,EAAE,GAAG,EAAE;QACX;QACA,IAAGA,EAAE,GAAG,EAAE,EAAC;UACPA,EAAE,GAAGA,EAAE,GAAG,EAAE;UACZM,OAAO,GAAG,IAAI;QAClB;QAEAN,EAAE,GAAIA,EAAE,GAAG,EAAE,GAAI,GAAG,GAAGA,EAAE,GAAGA,EAAE;QAC9BE,EAAE,GAAIA,EAAE,GAAG,EAAE,GAAI,GAAG,GAAGA,EAAE,GAAGA,EAAE;QAC9BE,EAAE,GAAIA,EAAE,GAAG,EAAE,GAAI,GAAG,GAAGA,EAAE,GAAGA,EAAE;QAE9B,IAAIX,aAAa,GAAGO,EAAE,GAAG,GAAG,GAAGE,EAAE,GAAG,GAAG,GAAGE,EAAE,GAAG,GAAG,GAAGE,OAAO;QAC5DZ,gBAAgB,CAACD,aAAa,CAAC;QAE/B,IAAIE,aAAa,GAAGI,IAAI,CAACQ,OAAO,CAAC,CAAC,GAAC,GAAG,IAAER,IAAI,CAACS,QAAQ,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,GAAG,GAAET,IAAI,CAACU,WAAW,CAAC,CAAC;QAClFb,gBAAgB,CAACD,aAAa,CAAC;QAEjCJ,OAAO,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MACrB,CAAC,EAAE,IAAI,CAAC;MAER,OAAO,MAAM;QACXkB,aAAa,CAACb,QAAQ,CAAC;MACzB,CAAC;IAGL,CAAC,CAAC;EAGN;EAACV,EAAA,CA3CQE,QAAQ;EA8CnB,oBACEJ,OAAA;IAAA0B,QAAA,eACI1B,OAAA;MAAI2B,SAAS,EAAC,WAAW;MAAAD,QAAA,EAAEtB;IAAQ;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV,CAAC;AAAAC,EAAA,GArDY/B,IAAI;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}